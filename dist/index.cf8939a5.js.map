{"mappings":"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","sources":["Telegram Games/dodge-the-blocks/game.js"],"sourcesContent":["// -------------------------\r\n// CONFIGURATION & GLOBAL VARIABLES\r\n// -------------------------\r\nconst config = {\r\n    type: Phaser.AUTO,\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n    parent: 'game-container',\r\n    scale: {\r\n      mode: Phaser.Scale.FIT,\r\n      autoCenter: Phaser.Scale.CENTER_BOTH,\r\n    },\r\n    physics: {\r\n      default: 'arcade',\r\n      arcade: { debug: false }\r\n    },\r\n    scene: { preload, create, update }\r\n  };\r\n  \r\n  let game = new Phaser.Game(config);\r\n  \r\n  // Global variables for progression and mode selection\r\n  let selectedMode; // \"normal\" or \"asian\"\r\n  let speedMultiplier = 1;\r\n  let nextSpeedIncreaseScore;\r\n  let nextMaxBlocksIncreaseScore;\r\n  \r\n  let playerSpeed = 6; // Initial player speed\r\n  \r\n  const modeSettings = {\r\n    normal: {\r\n      initialMinBlocks: 1,\r\n      initialMaxBlocks: 5,\r\n      blockSpeedMin: 5,\r\n      blockSpeedMax: 10,\r\n      spawnDelay: 500,\r\n      speedIncreaseFactor: 1.05,\r\n      maxBlockIncrease: 1,\r\n      threshold: 10\r\n    },\r\n    asian: {\r\n      initialMinBlocks: 2,\r\n      initialMaxBlocks: 8,\r\n      blockSpeedMin: 8,\r\n      blockSpeedMax: 13,\r\n      spawnDelay: 300,\r\n      speedIncreaseFactor: 1.10,\r\n      maxBlockIncrease: 2,\r\n      threshold: 10\r\n    }\r\n  };\r\n  \r\n  let player, cursors, score = 0, scoreText, gameOver = false;\r\n  let background, gameOverContainer, modeContainer;\r\n  let targetX = null;\r\n  const playerBaseSpeed = 6;\r\n  let blocks;\r\n  let maxBlocks;\r\n  let gameStarted = false;\r\n  let spawnTimer = null;\r\n  let gameOverShown = false;\r\n  \r\n  // -------------------------\r\n  // LEADERBOARD HELPER FUNCTIONS (Using Netlify Functions / LocalStorage demo)\r\n  // -------------------------\r\n  function submitScore(mode, name, score) {\r\n    fetch('https://dodgetheblock.netlify.app/.netlify/functions/submit-score', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ mode, name, score })\r\n    })\r\n      .then(res => res.json())\r\n      .then(data => console.log(\"Score submitted\", data))\r\n      .catch(err => console.error(\"Error submitting score\", err));\r\n  }\r\n  \r\n  function fetchLeaderboard(mode, callback) {\r\n    fetch(`https://dodgetheblock.netlify.app/.netlify/functions/get-leaderboard?mode=${mode}`)\r\n      .then(res => res.json())\r\n      .then(data => callback(data.leaderboard))\r\n      .catch(err => {\r\n        console.error(\"Error fetching leaderboard\", err);\r\n        callback(null);\r\n      });\r\n  }\r\n  \r\n  function formatLeaderboardFromData(data) {\r\n    let text = \"\";\r\n    if (!data || data.length === 0) return \"No entries\";\r\n    for (let i = 0; i < data.length; i++) {\r\n      text += `${i + 1}. ${data[i].name} - ${data[i].score}\\n`;\r\n    }\r\n    return text;\r\n  }\r\n  \r\n  function formatLeaderboard(mode) {\r\n    // For demo, return placeholder text; later you can fetch from your backend.\r\n    return \"Loading...\";\r\n  }\r\n  \r\n  // -------------------------\r\n  // PRELOAD FUNCTION\r\n  // -------------------------\r\n  function preload() {\r\n    this.load.image('background', 'assets/background.png');\r\n    this.load.image('player', 'assets/player.png');\r\n    this.load.image('block', 'assets/block.png');\r\n    this.load.image('gameOverBg', 'assets/game_over_bg.png');\r\n    this.load.image('restartButton', 'assets/restart_button.png');\r\n  }\r\n  \r\n  // -------------------------\r\n  // CREATE FUNCTION\r\n  // -------------------------\r\n  function create() {\r\n    background = this.add.image(0, 0, 'background')\r\n      .setOrigin(0)\r\n      .setDisplaySize(config.width, config.height);\r\n      \r\n    createModeSelectionUI(this);\r\n  }\r\n  \r\n  // -------------------------\r\n  // UPDATE FUNCTION (with delta time normalization)\r\n  // -------------------------\r\n  function update(time, delta) {\r\n    if (!gameStarted || gameOver) return;\r\n    let dt = delta / 16.67;\r\n    \r\n    // Player Movement\r\n    if (cursors.left.isDown) {\r\n      player.x -= playerSpeed * dt;\r\n    } else if (cursors.right.isDown) {\r\n      player.x += playerSpeed * dt;\r\n    }\r\n    if (targetX !== null) {\r\n      let diff = targetX - player.x;\r\n      if (Math.abs(diff) > playerSpeed) {\r\n        player.x += Math.sign(diff) * playerSpeed * dt;\r\n      } else {\r\n        player.x = targetX;\r\n      }\r\n    }\r\n    player.x = Phaser.Math.Clamp(player.x, player.width / 2, config.width - player.width / 2);\r\n    \r\n    // Blocks Movement & Collision\r\n    blocks.getChildren().forEach(function(block) {\r\n      block.speed = block.baseSpeed * speedMultiplier;\r\n      block.y += block.speed * dt;\r\n      if (checkCollision(player, block)) {\r\n        showGameOver();\r\n      }\r\n      if (block.y > config.height) {\r\n        block.destroy();\r\n        score++;\r\n        scoreText.setText('Score: ' + score);\r\n      }\r\n    });\r\n    \r\n    // Progression\r\n    let threshold = modeSettings[selectedMode].threshold;\r\n    if (score >= nextSpeedIncreaseScore) {\r\n      speedMultiplier *= modeSettings[selectedMode].speedIncreaseFactor;\r\n      playerSpeed *= 1.10;\r\n      nextSpeedIncreaseScore += threshold;\r\n    }\r\n    if (selectedMode === \"normal\") {\r\n      if (score >= nextMaxBlocksIncreaseScore) {\r\n        maxBlocks = Phaser.Math.Between(\r\n          modeSettings.normal.initialMinBlocks,\r\n          modeSettings.normal.initialMaxBlocks + Math.floor(score / 20) * modeSettings.normal.maxBlockIncrease\r\n        );\r\n        nextMaxBlocksIncreaseScore += threshold * 2;\r\n      }\r\n    } else if (selectedMode === \"asian\") {\r\n      if (score >= nextMaxBlocksIncreaseScore) {\r\n        maxBlocks = Phaser.Math.Between(\r\n          modeSettings.asian.initialMinBlocks,\r\n          modeSettings.asian.initialMaxBlocks + Math.floor(score / threshold) * modeSettings.asian.maxBlockIncrease\r\n        );\r\n        nextMaxBlocksIncreaseScore += threshold;\r\n      }\r\n    }\r\n  }\r\n  \r\n  // -------------------------\r\n  // MODE SELECTION UI & GAME START FUNCTIONS\r\n  // -------------------------\r\n  function createModeSelectionUI(scene) {\r\n    let playerName = localStorage.getItem(\"playerName\");\r\n    if (!playerName) {\r\n      playerName = prompt(\"Please enter your name:\");\r\n      if (!playerName) { playerName = \"Guest\"; }\r\n      localStorage.setItem(\"playerName\", playerName);\r\n    }\r\n    \r\n    if (gameOverContainer) { gameOverContainer.destroy(); gameOverContainer = null; }\r\n    if (modeContainer) { modeContainer.destroy(); modeContainer = null; }\r\n    \r\n    let personalHighscoreNormal = localStorage.getItem('highscore_normal') || 0;\r\n    let personalHighscoreAsian = localStorage.getItem('highscore_asian') || 0;\r\n    \r\n    modeContainer = scene.add.container(config.width / 2, config.height * 0.3);\r\n    modeContainer.setDepth(100);\r\n    \r\n    let playerNameText = scene.add.text(0, -100, `Hello, ${playerName}!`, {\r\n      fontSize: '20px',\r\n      fill: '#fff',\r\n      align: 'center'\r\n    }).setOrigin(0.5);\r\n    \r\n    let modeTitleText = scene.add.text(0, -60, \"Select Game Mode\", {\r\n      fontSize: '24px',\r\n      fill: '#fff',\r\n      align: 'center'\r\n    }).setOrigin(0.5);\r\n    \r\n    let normalButton = scene.add.text(0, -20, \"Normal Mode\", {\r\n      fontSize: '24px',\r\n      fill: '#fff',\r\n      backgroundColor: '#000',\r\n      padding: { x: 8, y: 4 }\r\n    }).setOrigin(0.5).setInteractive();\r\n    \r\n    let asianButton = scene.add.text(0, 20, \"Asian Normal Mode\", {\r\n      fontSize: '24px',\r\n      fill: '#fff',\r\n      backgroundColor: '#000',\r\n      padding: { x: 8, y: 4 }\r\n    }).setOrigin(0.5).setInteractive();\r\n    \r\n    let personalHighscoreText = scene.add.text(0, 50, \r\n      `Your Highscore:\\nNormal: ${personalHighscoreNormal}   Asian: ${personalHighscoreAsian}`, {\r\n      fontSize: '14px',\r\n      fill: '#fff',\r\n      align: 'center'\r\n    }).setOrigin(0.5);\r\n    \r\n    let leaderboardNormalText = scene.add.text(-config.width / 4, 80, \r\n      \"Normal:\\n\" + formatLeaderboard(\"normal\"), {\r\n      fontSize: '14px',\r\n      fill: '#fff',\r\n      align: 'center'\r\n    }).setOrigin(0.5, 0);\r\n    \r\n    let leaderboardAsianText = scene.add.text(config.width / 4, 80, \r\n      \"Asian:\\n\" + formatLeaderboard(\"asian\"), {\r\n      fontSize: '14px',\r\n      fill: '#fff',\r\n      align: 'center'\r\n    }).setOrigin(0.5, 0);\r\n    \r\n    let changeNameButton = scene.add.text(0, 110, \"Change Name\", {\r\n      fontSize: '14px',\r\n      fill: '#ff0',\r\n      backgroundColor: '#000',\r\n      padding: { x: 6, y: 3 }\r\n    }).setOrigin(0.5).setInteractive();\r\n    \r\n    changeNameButton.on('pointerdown', () => {\r\n      let newName = prompt(\"Enter your new name:\");\r\n      if (newName) {\r\n        localStorage.setItem(\"playerName\", newName);\r\n        playerNameText.setText(`Hello, ${newName}!`);\r\n      }\r\n    });\r\n    \r\n    normalButton.on('pointerdown', function() {\r\n      setMode(\"normal\");\r\n      modeContainer.destroy();\r\n      startGame(scene);\r\n    });\r\n    asianButton.on('pointerdown', function() {\r\n      setMode(\"asian\");\r\n      modeContainer.destroy();\r\n      startGame(scene);\r\n    });\r\n    \r\n    modeContainer.add([\r\n      playerNameText,\r\n      modeTitleText,\r\n      normalButton,\r\n      asianButton,\r\n      personalHighscoreText,\r\n      leaderboardNormalText,\r\n      leaderboardAsianText,\r\n      changeNameButton\r\n    ]);\r\n  }\r\n  \r\n  function setMode(mode) {\r\n    selectedMode = mode;\r\n    speedMultiplier = 1;\r\n    playerSpeed = 6;\r\n    nextSpeedIncreaseScore = modeSettings[mode].threshold;\r\n    nextMaxBlocksIncreaseScore = (mode === \"normal\") ? modeSettings[mode].threshold * 2 : modeSettings[mode].threshold;\r\n  }\r\n  \r\n  function startGame(scene) {\r\n    gameStarted = true;\r\n    if (modeContainer) { modeContainer.destroy(); modeContainer = null; }\r\n    \r\n    player = scene.add.image(config.width / 2, config.height - 80, 'player')\r\n      .setOrigin(0.5)\r\n      .setDisplaySize(40, 40);\r\n    score = 0;\r\n    scoreText = scene.add.text(10, 10, 'Score: 0', { fontSize: '20px', fill: '#fff' });\r\n    \r\n    cursors = scene.input.keyboard.createCursorKeys();\r\n    scene.input.on('pointerdown', (pointer) => { targetX = pointer.x; });\r\n    scene.input.on('pointermove', (pointer) => { targetX = pointer.x; });\r\n    scene.input.on('pointerup', () => { targetX = null; });\r\n    \r\n    blocks = scene.add.group();\r\n    \r\n    if (selectedMode === \"normal\") {\r\n      maxBlocks = Phaser.Math.Between(modeSettings.normal.initialMinBlocks, modeSettings.normal.initialMaxBlocks);\r\n    } else if (selectedMode === \"asian\") {\r\n      maxBlocks = Phaser.Math.Between(modeSettings.asian.initialMinBlocks, modeSettings.asian.initialMaxBlocks);\r\n    }\r\n    \r\n    spawnTimer = scene.time.addEvent({\r\n      delay: modeSettings[selectedMode].spawnDelay,\r\n      callback: spawnBlock,\r\n      callbackScope: scene,\r\n      loop: true\r\n    });\r\n    \r\n    createGameOverUI(scene);\r\n  }\r\n  \r\n  // -------------------------\r\n  // BLOCK SPAWNING & COLLISION\r\n  // -------------------------\r\n  function spawnBlock() {\r\n    if (gameOver) return;\r\n    if (blocks.getLength() < maxBlocks) {\r\n      let newBlock = this.add.image(\r\n        Phaser.Math.Between(40, config.width - 40),\r\n        0,\r\n        'block'\r\n      ).setOrigin(0.5).setDisplaySize(40, 40);\r\n      if (selectedMode === \"normal\") {\r\n        newBlock.baseSpeed = Phaser.Math.Between(modeSettings.normal.blockSpeedMin, modeSettings.normal.blockSpeedMax);\r\n      } else if (selectedMode === \"asian\") {\r\n        newBlock.baseSpeed = Phaser.Math.Between(modeSettings.asian.blockSpeedMin, modeSettings.asian.blockSpeedMax);\r\n      }\r\n      newBlock.speed = newBlock.baseSpeed * speedMultiplier;\r\n      blocks.add(newBlock);\r\n    }\r\n  }\r\n  \r\n  function checkCollision(spriteA, spriteB) {\r\n    const boundsA = spriteA.getBounds();\r\n    const boundsB = spriteB.getBounds();\r\n    return Phaser.Geom.Intersects.RectangleToRectangle(boundsA, boundsB);\r\n  }\r\n  \r\n  // -------------------------\r\n  // GAME OVER & RESTART UI\r\n  // -------------------------\r\n  function createGameOverUI(scene) {\r\n    if (gameOverContainer) return;\r\n    gameOverContainer = scene.add.container(config.width / 2, config.height / 2);\r\n    gameOverContainer.setDepth(100);\r\n    gameOverContainer.setVisible(false);\r\n    \r\n    let gameOverBg = scene.add.image(0, 0, 'gameOverBg')\r\n      .setOrigin(0.5)\r\n      .setDisplaySize(300, 200);\r\n    let gameOverText = scene.add.text(0, -50, 'Game Over!', {\r\n      fontSize: '30px',\r\n      fill: '#fff',\r\n      align: 'center'\r\n    }).setOrigin(0.5);\r\n    let finalScoreText = scene.add.text(0, 0, 'Score: 0', {\r\n      fontSize: '20px',\r\n      fill: '#fff',\r\n      align: 'center'\r\n    }).setOrigin(0.5);\r\n    let restartButton = scene.add.image(0, 50, 'restartButton')\r\n      .setOrigin(0.5)\r\n      .setInteractive();\r\n    restartButton.on('pointerdown', () => { restartGame(scene); });\r\n    \r\n    gameOverContainer.add([gameOverBg, gameOverText, finalScoreText, restartButton]);\r\n  }\r\n  \r\n  function showGameOver() {\r\n    if (gameOverShown) return;\r\n    gameOver = true;\r\n    gameOverShown = true;\r\n    gameOverContainer.setVisible(true);\r\n    gameOverContainer.getAt(2).setText('Score: ' + score);\r\n    \r\n    let playerName = localStorage.getItem(\"playerName\") || \"Guest\";\r\n    fetch('https://dodgetheblock.netlify.app/.netlify/functions/submit-score', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ mode: selectedMode, name: playerName, score: score })\r\n    })\r\n      .then(res => res.json())\r\n      .then(data => console.log(\"Score submitted\", data))\r\n      .catch(err => console.error(\"Error submitting score\", err));\r\n    \r\n    if (selectedMode === \"normal\") {\r\n      let hs = localStorage.getItem('highscore_normal') || 0;\r\n      if (score > hs) {\r\n        localStorage.setItem('highscore_normal', score);\r\n      }\r\n      updateLeaderboard(\"normal\", playerName, score);\r\n    } else if (selectedMode === \"asian\") {\r\n      let hs = localStorage.getItem('highscore_asian') || 0;\r\n      if (score > hs) {\r\n        localStorage.setItem('highscore_asian', score);\r\n      }\r\n      updateLeaderboard(\"asian\", playerName, score);\r\n    }\r\n  }\r\n  \r\n  function restartGame(scene) {\r\n    if (spawnTimer) {\r\n      spawnTimer.remove();\r\n      spawnTimer = null;\r\n    }\r\n    \r\n    gameOver = false;\r\n    gameStarted = false;\r\n    score = 0;\r\n    speedMultiplier = 1;\r\n    playerSpeed = 6;\r\n    gameOverShown = false;\r\n    \r\n    if (player) { player.destroy(); player = null; }\r\n    if (scoreText) { scoreText.destroy(); scoreText = null; }\r\n    if (blocks) { blocks.clear(true, true); }\r\n    \r\n    if (selectedMode === \"normal\") {\r\n      maxBlocks = Phaser.Math.Between(modeSettings.normal.initialMinBlocks, modeSettings.normal.initialMaxBlocks);\r\n    } else if (selectedMode === \"asian\") {\r\n      maxBlocks = Phaser.Math.Between(modeSettings.asian.initialMinBlocks, modeSettings.asian.initialMaxBlocks);\r\n    }\r\n    \r\n    gameOverContainer.setVisible(false);\r\n    createModeSelectionUI(scene);\r\n  }\r\n  "],"names":[],"version":3,"file":"index.cf8939a5.js.map","sourceRoot":"/__parcel_source_root/"}